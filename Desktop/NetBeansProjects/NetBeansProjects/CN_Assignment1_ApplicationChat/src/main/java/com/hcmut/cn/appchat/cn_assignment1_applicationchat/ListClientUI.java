/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package com.hcmut.cn.appchat.cn_assignment1_applicationchat;


import java.util.List;
import com.hcmut.cn.appchat.cn_assignment1_applicationchat.ServerSocketThread;
import java.io.IOException;
import java.net.ServerSocket;
import java.net.Socket;
import java.util.logging.Level;
import java.util.logging.Logger;
import com.hcmut.cn.appchat.cn_assignment1_applicationchat.ClientInfo;
import com.hcmut.cn.appchat.cn_assignment1_applicationchat.ChatWindow;

/**
 *
 * @author nguye
 */
public class ListClientUI extends javax.swing.JFrame {
    private static List<ClientInfo> listClient;
    private Socket socket;
    private ChatClient chatClient;
    /**
     * Creates new form ListClientUI
     */
    public ListClientUI(List<ClientInfo> listClient) {
        initComponents();
        this.listClient = listClient;
    }

    public ListClientUI(ChatClient chatClient, List<ClientInfo> list) {
        this(list);
        this.chatClient = chatClient;
        
        //  
        ServerSocket serverSocket;
        try {
            serverSocket = new ServerSocket(chatClient.getMyPort());
            ServerSocketThread serverSocketThread = new ServerSocketThread(serverSocket);
            serverSocketThread.start();
            
            
            while (true) {
                Socket socket;
                if (serverSocketThread.getSocket() != null) {
                    socket = serverSocketThread.getSocket();
                    serverSocketThread.setNULL();
                    
                    ClientInfo otherInfo = new ClientInfo(socket.getInetAddress().getHostAddress(), socket.getPort());
                    
//                    ChatWindowThread chatWindowThread = new ChatWindowThread(
//                            connect2ChatClient.getServerSocket2(),
//                            connect2ChatClient.getSocket21Accept(),
//                            connect2ChatClient.getSocket21()
//                    );
//                    chatWindowThread.start();
                    
                }
                
                
                
            }
            
            
            
        } catch (IOException ex) {
            Logger.getLogger(ListClientUI.class.getName()).log(Level.SEVERE, null, ex);
            ex.printStackTrace();
        }
        
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        activeUserList = new javax.swing.JList<>();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        activeUserList.setModel(new javax.swing.AbstractListModel<String>() {
            String[] strings = { "Item 1", "Item 2", "Item 3", "Item 4", "Item 5" };
            public int getSize() { return strings.length; }
            public String getElementAt(int i) { return strings[i]; }
        });
        jScrollPane1.setViewportView(activeUserList);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(25, 25, 25)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(225, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(25, 25, 25)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 250, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(25, 25, 25))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(ListClientUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(ListClientUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(ListClientUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(ListClientUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new ListClientUI(listClient).setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JList<String> activeUserList;
    private javax.swing.JScrollPane jScrollPane1;
    // End of variables declaration//GEN-END:variables

    public void listen(int port) {
        ServerSocketThread serverSocketThread;
        ServerSocket serverSocket;
        
        try {
            serverSocket = new ServerSocket(port);
            serverSocketThread = new ServerSocketThread(serverSocket);
            serverSocketThread.start();

            Socket socketReturn;
            while (true) {
                if (serverSocketThread.getSocket() != null) {
                    socketReturn = serverSocketThread.getSocket();
                    serverSocketThread.setNULL();
                    ClientInfo otherClient = new ClientInfo(socketReturn.getInetAddress().getHostAddress(), socketReturn.getPort());
                    
                    
                }
            }
            
            
            

        } catch (IOException ex) {
            Logger.getLogger(ListClientUI.class.getName()).log(Level.SEVERE, null, ex);
        }
        
        
    }
}
